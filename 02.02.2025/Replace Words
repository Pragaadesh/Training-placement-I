struct node {
    struct node *sibling;
    struct node *children;
    char letter;
    bool is_end;
};

void insert_word(struct node **indirect, char *word)
{
    while (true) {
        while (*indirect && (*indirect)->letter != *word) {
            indirect = &(*indirect)->sibling;
        }

        if (*indirect == NULL) {
            *indirect = malloc(sizeof(struct node));
            **indirect = (struct node) {
                .letter = *word,
            };
        }

        if (*(word + 1) == '\0') {
            (*indirect)->is_end = true;
            break;
        }

        word++;
        indirect = &(*indirect)->children;
    }
}

int find_word(struct node *root, char *word, int length)
{
    int root_len;

    for (root_len = 0; root && root_len < length; root_len++, root = root->children, word++) {
        while (root && root->letter != *word) {
            root = root->sibling;
        }

        if (root == NULL) {
            break;
        }

        if (root->is_end) {
            return root_len + 1;
        }
    }

    return 0;
}

void trim_space(char *sentence)
{
    int i, next;

    for (i = 1, next = 1; sentence[i] != '\0';) {
        sentence[next++] = sentence[i++];
        if (sentence[next - 1] == ' ') {
            while (sentence[i] == ' ') {
                i += 1;
            }
        }
    }

    sentence[next] = '\0';
    while (sentence[next] == '\0' || sentence[next] == ' ') {
        sentence[next--] = '\0';
    }
}

char* replaceWords(char** dictionary, int size, char* sentence)
{
    struct node *root = NULL;
    int i, length, root_len;

    for (i = 0; i < size; i++) {
        insert_word(&root, dictionary[i]);
    }

    for (i = 0; sentence[i] != '\0';) {
        if (sentence[i] == ' ') {
            i++;
            continue;
        }

        for (length = 1; sentence[i + length] != '\0' && sentence[i + length] != ' '; length++);

        root_len = find_word(root, sentence + i, length);
        if (root_len) {
            i += root_len;

            while (sentence[i] != ' ' && sentence[i] != '\0') {
                sentence[i++] = ' ';
            }

        } else {
            i += length;
        }
    }

    trim_space(sentence);

    return sentence;
}
